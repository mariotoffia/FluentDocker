name: CI

on:
  push:
    branches:
      - master
      - main
      - ci-gh-action-migration  # For testing GitHub Action Workflows
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: 'true'
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    steps:
      - name: Detect environment
        id: detect-env
        run: |
          if [ "$GITHUB_ACTOR" == "nektos/act" ]; then
            echo "running_in_act=true" >> $GITHUB_OUTPUT
          else
            echo "running_in_act=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Echo environment
        run: |
          echo "Running in act environment: ${{ steps.detect-env.outputs.running_in_act }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for GitVersion to work properly

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '5.12'
      
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.Major }}"
          echo "Minor: ${{ steps.gitversion.outputs.Minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.Patch }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.NuGetVersion }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.NuGetVersion }} /p:AssemblyVersion=${{ steps.gitversion.outputs.AssemblySemVer }} /p:FileVersion=${{ steps.gitversion.outputs.AssemblySemFileVer }}

      - name: Run tests (in act)
        if: steps.detect-env.outputs.running_in_act == 'true'
        env:
          TERM: dumb
          DOTNET_CLI_UI_LANGUAGE: en-US
        run: |
          echo "Running in act environment - excluding container tests"
          dotnet test \
            --no-build \
            --configuration Release \
            --filter "TestCategory=CI&FullyQualifiedName!~FluentContainerBasicTests" \
            --logger "console;verbosity=detailed"

      - name: Run tests (in GitHub)
        if: steps.detect-env.outputs.running_in_act != 'true'
        run: >
          dotnet test 
          --no-build 
          --configuration Release 
          --filter "TestCategory=CI"
          --collect:"XPlat Code Coverage" 
          --results-directory ./coverage
          --settings coverletArgs.runsettings

      - name: Detect branch for SonarCloud
        id: detect-branch
        run: |
          if [ "${{ steps.detect-env.outputs.running_in_act }}" == "true" ]; then
            # Use git to determine branch name when running in act
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            echo "Using git to determine branch: $BRANCH_NAME"
            echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            # In GitHub Actions, we can use GitHub's environment variables
            echo "Using GitHub environment for branch info"
            echo "branch=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          fi

      # Prepare environment variables for SonarCloud
      - name: Setup SonarCloud environment variables
        id: sonar-env
        run: |
          # Ensure the token is available regardless of environment
          if [ "${{ steps.detect-env.outputs.running_in_act }}" == "true" ] && [ -n "$SONAR_TOKEN" ]; then
            echo "Using SONAR_TOKEN from environment file"
            echo "token=$SONAR_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "Using SONAR_TOKEN from GitHub secrets"
            echo "token=${{ secrets.SONAR_TOKEN }}" >> $GITHUB_OUTPUT
          fi

      # Single SonarCloud scan step for both environments
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.sonar-env.outputs.token }}
        with:
          args: >
            -Dsonar.projectKey=mariotoffia_FluentDocker
            -Dsonar.organization=mariotoffia
            -Dsonar.cs.opencover.reportsPaths=./coverage/**/coverage.opencover.xml
            -Dsonar.coverage.exclusions=**Tests*.cs
            -Dsonar.branch.name=${{ steps.detect-branch.outputs.branch }}
            -Dsonar.projectVersion=${{ steps.gitversion.outputs.AssemblySemVer }}
            
      - name: Create NuGet packages
        run: |
          echo "Creating NuGet packages with version: ${{ steps.gitversion.outputs.NuGetVersion }}"
          dotnet pack --configuration Release --no-build --output packages /p:Version=${{ steps.gitversion.outputs.NuGetVersion }} /p:AssemblyVersion=${{ steps.gitversion.outputs.AssemblySemVer }} /p:FileVersion=${{ steps.gitversion.outputs.AssemblySemFileVer }}

      - name: List NuGet packages
        run: |
          echo "Created NuGet packages:"
          ls -la packages/*.nupkg
          
      - name: Upload NuGet packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: packages/*.nupkg
          retention-days: 7
        continue-on-error: ${{ steps.detect-env.outputs.running_in_act == 'true' }}

      - name: Publish NuGet packages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: |
          echo "Publishing NuGet packages with version: ${{ steps.gitversion.outputs.NuGetVersion }}"
          dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        continue-on-error: ${{ steps.detect-env.outputs.running_in_act == 'true' }}
        
      - name: Create and push Git tag for release
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && steps.detect-env.outputs.running_in_act != 'true'
        run: |
          echo "Creating Git tag for version: ${{ steps.gitversion.outputs.NuGetVersion }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.gitversion.outputs.NuGetVersion }}
          git push origin ${{ steps.gitversion.outputs.NuGetVersion }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}